name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    strategy:
      matrix:
        ARCH: [x86_64, i386, aarch64]
        BUILD_TYPE: [appimage, coverage]
      fail-fast: false

    name: ${{ matrix.BUILD_TYPE }} ${{ matrix.ARCH }}
    runs-on: ubuntu-16.04

    env:
      ARCH: ${{ matrix.ARCH }}
      BUILD_TYPE: ${{ matrix.BUILD_TYPE }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies (x86_64)
        if: matrix.ARCH == 'x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libmagic-dev libjpeg-dev libpng-dev cimg-dev

      - name: Install dependencies (i386)
        if: matrix.ARCH == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y libmagic-dev:i386 libjpeg-dev:i386 libpng-dev:i386 cimg-dev gcc-multilib g++-multilib libfuse2:i386

      - name: Build and test (native)
        if: matrix.ARCH != 'aarch64'
        run: bash -ex ci/build.sh

      - name: Build and test (VM)
        if: matrix.ARCH != 'x86_64' && matrix.ARCH != 'i386'
        uses: uraimo/run-on-arch-action@v2.0.5
        with:
          arch: ${{ matrix.ARCH }}
          distro: ubuntu16.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/build"
          install: |
            apt update
            apt install -y build-essential wget git pkg-config autoconf libmagic-dev libjpeg-dev libpng-dev cimg-dev
          run: |
            cd /build
            ARCH=$(uname -m) ci/build.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: AppImage aarch64
          path: linuxdeploy-plugin-appimage*.AppImage*

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        if: matrix.BUILD_TYPE != 'coverage'
        with:
          name: AppImage
          path: linuxdeploy*.AppImage*

  upload:
    name: Create release and upload artifacts
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/linuxdeploy*.AppImage*
